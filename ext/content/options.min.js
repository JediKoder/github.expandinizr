function getAuthorizedSites(){chrome.permissions.getAll(function(i){allPermissions=i})}function showAuthorizedSites(){chrome.permissions.getAll(function(i){allPermissions=i,chrome.storage.sync.get({public_gist_enabled:!0,public_github_enabled:!0},function(e){extOptions=e,$.each(i.origins,function(i,e){if("https://gist.github.com/*"==e||"https://github.com/*"==e){var t=$('<li id="new_auth_url_'+i+'">                            <div>                              <input id="unauth_url_submit'+i+'" class="btn btn-sm btn-danger" type="submit" value="Disable">                            </div>                            <strong>'+e+"</strong>                        </li>");("https://gist.github.com/*"!=e||extOptions.public_gist_enabled)&&("https://github.com/*"!=e||extOptions.public_github_enabled)?t.find("input").click(function(){removeAuthorizedSite(i,e)}):(console.debug(e+" "+extOptions.public_gist_enabled),t.find("input").removeClass("btn-danger").addClass("btn-primary").val("Enable").click(function(){addAuthorizedSite(i,e)})),$("#permissions").prepend(t)}else{var t=$('<li id="new_auth_url_'+i+'">                            <div>                              <input id="unauth_url_submit'+i+'" class="btn btn-sm btn-danger" type="submit" value="Unauthorize">                            </div>                          <strong>'+e+"</strong>                        </li>");t.find("input").click(function(){removeAuthorizedSite(i,e)}),$("#new_auth_url_item").before(t)}})})})}function addAuthorizedSite(i,e){if(console.debug(i+" "+e),void 0!=i&&void 0!=e)"https://gist.github.com/*"==e?(chrome.storage.sync.set({public_gist_enabled:!0}),$("#new_auth_url_"+i).find("input").removeClass("btn-primary").addClass("btn-danger").val("Disable").unbind("click").click(function(){removeAuthorizedSite(i,e)})):"https://github.com/*"==e&&(chrome.storage.sync.set({public_github_enabled:!0}),$("#new_auth_url_"+i).find("input").removeClass("btn-primary").addClass("btn-danger").val("Disable").unbind("click").click(function(){removeAuthorizedSite(i,e)}));else{var t=$("#new_auth_url").val().trim();""!=t&&("/*"!=t.slice(-2)&&(t+="/*"),"/"===t.slice(-1)&&(t+="*")),chrome.permissions.contains({origins:[t]},function(i){i?($("li:contains("+t+")").addClass("highlight").delay(4500).queue(function(){$(this).removeClass("highlight"),$(this).dequeue()}),$("#new_auth_url_msg").text("Duplicate URL - "+t)):chrome.permissions.request({origins:[t]},function(i){if(i){getAuthorizedSites();var e=allPermissions.origins.length,n=$('<li id="new_auth_url_'+e+'">                                <div>                                  <input id="unauth_url_submit'+e+'" class="btn btn-sm btn-danger" type="submit" value="Unauthorize">                                </div>                              <strong>'+t+"</strong>                            </li>");n.find("input").click(function(){removeAuthorizedSite(e,t)}),$("#new_auth_url_item").before(n),$("#new_auth_url").val(""),$("#new_auth_url_submit").prop("disabled",!0),$("#new_auth_url_msg").text("")}else{var s=chrome.runtime.lastError;s&&(console.log(s.message),$("#new_auth_url_msg").text(s.message))}})})}}function removeAuthorizedSite(i,e){var t=confirm("Really remove/disable "+e+"?");t&&chrome.permissions.contains({origins:[e]},function(t){t?"https://gist.github.com/*"==e?(chrome.storage.sync.set({public_gist_enabled:!1}),$("#new_auth_url_"+i).find("input").removeClass("btn-danger").addClass("btn-primary").val("Enable").unbind("click").bind("click",function(){addAuthorizedSite(i,e)})):"https://github.com/*"==e?(chrome.storage.sync.set({public_github_enabled:!1}),$("#new_auth_url_"+i).find("input").removeClass("btn-danger").addClass("btn-primary").val("Enable").unbind("click").bind("click",function(){addAuthorizedSite(i,e)})):chrome.permissions.remove({origins:[e]},function(e){e?$("#new_auth_url_"+i).remove():alert("Required permissions cannot be removed.")}):console.debug("not found")})}function setupUI(){showAuthorizedSites(),$("#new_auth_url_submit").click(addAuthorizedSite),$("#new_auth_url").keyup(function(){""==$(this).val()?$("#new_auth_url_submit").prop("disabled",!0):$("#new_auth_url_submit").prop("disabled",!1)})}var allPermissions={},extOptions={};document.addEventListener("DOMContentLoaded",setupUI);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9wdGlvbnMuanMiXSwibmFtZXMiOlsiZ2V0QXV0aG9yaXplZFNpdGVzIiwiY2hyb21lIiwicGVybWlzc2lvbnMiLCJnZXRBbGwiLCJhbGxQZXJtaXNzaW9ucyIsInNob3dBdXRob3JpemVkU2l0ZXMiLCJzdG9yYWdlIiwic3luYyIsImdldCIsInB1YmxpY19naXN0X2VuYWJsZWQiLCJwdWJsaWNfZ2l0aHViX2VuYWJsZWQiLCJvcHRpb25zIiwiZXh0T3B0aW9ucyIsIiQiLCJlYWNoIiwib3JpZ2lucyIsImtleSIsInZhbHVlIiwibmV3SXRlbSIsImZpbmQiLCJjbGljayIsInJlbW92ZUF1dGhvcml6ZWRTaXRlIiwiY29uc29sZSIsImRlYnVnIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsInZhbCIsImFkZEF1dGhvcml6ZWRTaXRlIiwicHJlcGVuZCIsImJlZm9yZSIsImlkIiwiVVJMIiwidW5kZWZpbmVkIiwic2V0IiwidW5iaW5kIiwibmV3VVJMIiwidHJpbSIsInNsaWNlIiwiY29udGFpbnMiLCJyZXN1bHQiLCJkZWxheSIsInF1ZXVlIiwidGhpcyIsImRlcXVldWUiLCJ0ZXh0IiwicmVxdWVzdCIsImdyYW50ZWQiLCJuZXdfYXV0aF91cmxfaWQiLCJsZW5ndGgiLCJwcm9wIiwibGFzdEVycm9yIiwicnVudGltZSIsImxvZyIsIm1lc3NhZ2UiLCJyIiwiY29uZmlybSIsImJpbmQiLCJyZW1vdmUiLCJyZW1vdmVkIiwiYWxlcnQiLCJzZXR1cFVJIiwia2V5dXAiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJBQUdBLFFBQVNBLHNCQUNMQyxPQUFPQyxZQUFZQyxPQUFRLFNBQVVELEdBQ2pDRSxlQUFpQkYsSUFJekIsUUFBU0csdUJBQ0xKLE9BQU9DLFlBQVlDLE9BQVEsU0FBVUQsR0FDakNFLGVBQWlCRixFQUNqQkQsT0FBT0ssUUFBUUMsS0FBS0MsS0FDaEJDLHFCQUFxQixFQUNyQkMsdUJBQXVCLEdBRTNCLFNBQVND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QUNmdkIsU0FBVWdCLElBQ1gsU0FBU1EsR0FDSkEsRUFFVyw2QkFBUFIsR0FDQTlCLE9BQU9LLFFBQVFDLEtBQUswQixLQUFNeEIscUJBQXFCLElBQy9DSSxFQUFFLGlCQUFtQmlCLEdBQ2hCWCxLQUFLLFNBQ0xLLFlBQVksY0FDWkMsU0FBUyxlQUNUQyxJQUFJLFVBQ0pRLE9BQU8sU0FDUHNCLEtBQUssUUFBUyxXQUNYN0Isa0JBQWtCRyxFQUFJQyxNQUVoQix3QkFBUEEsR0FDUDlCLE9BQU9LLFFBQVFDLEtBQUswQixLQUFNdkIsdUJBQXVCLElBQ2pERyxFQUFFLGlCQUFtQmlCLEdBQ2hCWCxLQUFLLFNBQ0xLLFlBQVksY0FDWkMsU0FBUyxlQUNUQyxJQUFJLFVBQ0pRLE9BQU8sU0FDUHNCLEtBQUssUUFBUyxXQUNYN0Isa0JBQWtCRyxFQUFJQyxNQUc5QjlCLE9BQU9DLFlBQVl1RCxRQUNmMUMsU0FBVWdCLElBQ1AsU0FBUzJCLEdBQ1JBLEVBRUE3QyxFQUFFLGlCQUFtQmlCLEdBQUkyQixTQUl6QkUsTUFBTSw2Q0FNcEJyQyxRQUFRQyxNQUFNLGVBTTVCLFFBQVNxQyxXQUNMdkQsc0JBQ0FRLEVBQUUsd0JBQXdCTyxNQUFNTyxtQkFDaENkLEVBQUUsaUJBQWlCZ0QsTUFBTyxXQUNGLElBQWpCaEQsRUFBRTZCLE1BQU1oQixNQUNQYixFQUFFLHdCQUF3Qm9DLEtBQUssWUFBWSxHQUUzQ3BDLEVBQUUsd0JBQXdCb0MsS0FBSyxZQUFZLEtBak52RCxHQUFJN0MsbUJBQ0FRLGFBcU5Ka0QsVUFBU0MsaUJBQWlCLG1CQUFvQkgiLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhbGxQZXJtaXNzaW9ucyA9IHt9XG52YXIgZXh0T3B0aW9ucyAgICAgPSB7fVxuXG5mdW5jdGlvbiBnZXRBdXRob3JpemVkU2l0ZXMoKSB7XG4gICAgY2hyb21lLnBlcm1pc3Npb25zLmdldEFsbCggZnVuY3Rpb24gKHBlcm1pc3Npb25zKSB7XG4gICAgICAgIGFsbFBlcm1pc3Npb25zID0gcGVybWlzc2lvbnM7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNob3dBdXRob3JpemVkU2l0ZXMoKSB7XG4gICAgY2hyb21lLnBlcm1pc3Npb25zLmdldEFsbCggZnVuY3Rpb24gKHBlcm1pc3Npb25zKSB7XG4gICAgICAgIGFsbFBlcm1pc3Npb25zID0gcGVybWlzc2lvbnM7XG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KHtcbiAgICAgICAgICAgIHB1YmxpY19naXN0X2VuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBwdWJsaWNfZ2l0aHViX2VuYWJsZWQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgZXh0T3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICAgICAkLmVhY2gocGVybWlzc2lvbnMub3JpZ2lucywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJodHRwczovL2dpc3QuZ2l0aHViLmNvbS8qXCIgfHwgdmFsdWUgPT0gXCJodHRwczovL2dpdGh1Yi5jb20vKlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIG9wdGlvbnMgYW5kIHNldCBidXR0b25nXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdJdGVtID0gJChcIjxsaSBpZD1cXFwibmV3X2F1dGhfdXJsX1wiICsga2V5ICsgXCJcXFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPVxcXCJ1bmF1dGhfdXJsX3N1Ym1pdFwiICsga2V5ICsgXCJcXFwiIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1kYW5nZXJcXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCIgdmFsdWU9XFxcIkRpc2FibGVcXFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlwiICsgdmFsdWUgKyBcIjwvc3Ryb25nPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vKlwiICYmICFleHRPcHRpb25zLnB1YmxpY19naXN0X2VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcodmFsdWUgKyBcIiBcIiArIGV4dE9wdGlvbnMucHVibGljX2dpc3RfZW5hYmxlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdJdGVtLmZpbmQoXCJpbnB1dFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImJ0bi1kYW5nZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJidG4tcHJpbWFyeVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWwoXCJFbmFibGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1dGhvcml6ZWRTaXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09IFwiaHR0cHM6Ly9naXRodWIuY29tLypcIiAmJiAhZXh0T3B0aW9ucy5wdWJsaWNfZ2l0aHViX2VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcodmFsdWUgKyBcIiBcIiArIGV4dE9wdGlvbnMucHVibGljX2dpc3RfZW5hYmxlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdJdGVtLmZpbmQoXCJpbnB1dFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImJ0bi1kYW5nZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJidG4tcHJpbWFyeVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWwoXCJFbmFibGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1dGhvcml6ZWRTaXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SXRlbS5maW5kKFwiaW5wdXRcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQXV0aG9yaXplZFNpdGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkKFwiI3Blcm1pc3Npb25zXCIpLnByZXBlbmQobmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0l0ZW0gPSAkKFwiPGxpIGlkPVxcXCJuZXdfYXV0aF91cmxfXCIgKyBrZXkgKyBcIlxcXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XFxcInVuYXV0aF91cmxfc3VibWl0XCIgKyBrZXkgKyBcIlxcXCIgY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLWRhbmdlclxcXCIgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiVW5hdXRob3JpemVcXFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cIiArIHZhbHVlICsgXCI8L3N0cm9uZz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cIik7XG4gICAgICAgICAgICAgICAgICAgIG5ld0l0ZW0uZmluZChcImlucHV0XCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUF1dGhvcml6ZWRTaXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjbmV3X2F1dGhfdXJsX2l0ZW1cIikuYmVmb3JlKG5ld0l0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkQXV0aG9yaXplZFNpdGUoaWQsIFVSTCkge1xuICAgIGNvbnNvbGUuZGVidWcoaWQgKyBcIiBcIiArIFVSTCk7XG4gICAgaWYgKGlkICE9IHVuZGVmaW5lZCAmJiBVUkwgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChVUkwgPT0gXCJodHRwczovL2dpc3QuZ2l0aHViLmNvbS8qXCIpIHtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHsgcHVibGljX2dpc3RfZW5hYmxlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICQoXCIjbmV3X2F1dGhfdXJsX1wiICsgaWQpXG4gICAgICAgICAgICAgICAgLmZpbmQoXCJpbnB1dFwiKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImJ0bi1wcmltYXJ5XCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwiYnRuLWRhbmdlclwiKVxuICAgICAgICAgICAgICAgIC52YWwoXCJEaXNhYmxlXCIpXG4gICAgICAgICAgICAgICAgLnVuYmluZChcImNsaWNrXCIpXG4gICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVBdXRob3JpemVkU2l0ZShpZCwgVVJMKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChVUkwgPT0gXCJodHRwczovL2dpdGh1Yi5jb20vKlwiKSB7XG4gICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7IHB1YmxpY19naXRodWJfZW5hYmxlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICQoXCIjbmV3X2F1dGhfdXJsX1wiICsgaWQpXG4gICAgICAgICAgICAgICAgLmZpbmQoXCJpbnB1dFwiKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImJ0bi1wcmltYXJ5XCIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKFwiYnRuLWRhbmdlclwiKVxuICAgICAgICAgICAgICAgIC52YWwoXCJEaXNhYmxlXCIpXG4gICAgICAgICAgICAgICAgLnVuYmluZChcImNsaWNrXCIpXG4gICAgICAgICAgICAgICAgLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVBdXRob3JpemVkU2l0ZShpZCwgVVJMKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXdVUkwgPSAkKFwiI25ld19hdXRoX3VybFwiKS52YWwoKS50cmltKCk7XG4gICAgICAgIGlmIChuZXdVUkwgIT0gJycpIHtcbiAgICAgICAgICAgIGlmIChuZXdVUkwuc2xpY2UoLTIpICE9ICcvKicpIG5ld1VSTCA9IG5ld1VSTCArICcvKidcbiAgICAgICAgICAgIGlmIChuZXdVUkwuc2xpY2UoLTEpID09PSAnLycpIG5ld1VSTCA9IG5ld1VSTCArICcqJ1xuICAgICAgICB9XG4gICAgICAgIGNocm9tZS5wZXJtaXNzaW9ucy5jb250YWlucyh7XG4gICAgICAgICAgICBvcmlnaW5zOiBbbmV3VVJMXVxuICAgICAgICB9LCBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZXh0ZW5zaW9uIGhhcyB0aGUgcGVybWlzc2lvbnMgYWxyZWFkeS5cbiAgICAgICAgICAgICAgICAkKFwibGk6Y29udGFpbnMoXCIgKyBuZXdVUkwgKyBcIilcIikuYWRkQ2xhc3MoXCJoaWdobGlnaHRcIilcbiAgICAgICAgICAgICAgICAgICAuZGVsYXkoNDUwMClcbiAgICAgICAgICAgICAgICAgICAucXVldWUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJoaWdobGlnaHRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZGVxdWV1ZSgpO1xuICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICQoXCIjbmV3X2F1dGhfdXJsX21zZ1wiKS50ZXh0KFwiRHVwbGljYXRlIFVSTCAtIFwiICsgbmV3VVJMKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGV4dGVuc2lvbiBkb2Vzbid0IGhhdmUgdGhlIHBlcm1pc3Npb25zLnNcbiAgICAgICAgICAgICAgICBjaHJvbWUucGVybWlzc2lvbnMucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgb3JpZ2luczogW25ld1VSTF1cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGdyYW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyYW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldEF1dGhvcml6ZWRTaXRlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld19hdXRoX3VybF9pZCA9IGFsbFBlcm1pc3Npb25zLm9yaWdpbnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9zYXZlT3B0aW9ucygpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SXRlbSA9ICQoXCI8bGkgaWQ9XFxcIm5ld19hdXRoX3VybF9cIiArIG5ld19hdXRoX3VybF9pZCArIFwiXFxcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPVxcXCJ1bmF1dGhfdXJsX3N1Ym1pdFwiICsgbmV3X2F1dGhfdXJsX2lkICsgXCJcXFwiIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1kYW5nZXJcXFwiIHR5cGU9XFxcInN1Ym1pdFxcXCIgdmFsdWU9XFxcIlVuYXV0aG9yaXplXFxcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cIiArIG5ld1VSTCArIFwiPC9zdHJvbmc+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0l0ZW0uZmluZChcImlucHV0XCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVBdXRob3JpemVkU2l0ZShuZXdfYXV0aF91cmxfaWQsIG5ld1VSTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI25ld19hdXRoX3VybF9pdGVtXCIpLmJlZm9yZShuZXdJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjbmV3X2F1dGhfdXJsXCIpLnZhbChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjbmV3X2F1dGhfdXJsX3N1Ym1pdFwiKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNuZXdfYXV0aF91cmxfbXNnXCIpLnRleHQoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwZXJtaXNzaW9ucyBub3QgZ3JhbnRlZCAoYnkgdXNlciBvciBlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0RXJyb3IgPSBjaHJvbWUucnVudGltZS5sYXN0RXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobGFzdEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjbmV3X2F1dGhfdXJsX21zZ1wiKS50ZXh0KGxhc3RFcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF1dGhvcml6ZWRTaXRlKGlkLCBVUkwpIHtcbiAgICAvL2NvbnNvbGUuZGVidWcoaWQpO1xuICAgIC8vY29uc29sZS5kZWJ1ZyhVUkwpO1xuICAgIHZhciByID0gY29uZmlybShcIlJlYWxseSByZW1vdmUvZGlzYWJsZSBcIiArIFVSTCArIFwiP1wiKTtcbiAgICBpZiAocikge1xuICAgICAgICBjaHJvbWUucGVybWlzc2lvbnMuY29udGFpbnMoe1xuICAgICAgICAgICAgb3JpZ2luczogW1VSTF1cbiAgICAgICAgfSwgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGV4dGVuc2lvbiBoYXMgdGhlIHBlcm1pc3Npb25zLlxuICAgICAgICAgICAgICAgIGlmIChVUkwgPT0gXCJodHRwczovL2dpc3QuZ2l0aHViLmNvbS8qXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoeyBwdWJsaWNfZ2lzdF9lbmFibGVkOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNuZXdfYXV0aF91cmxfXCIgKyBpZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKFwiaW5wdXRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImJ0bi1kYW5nZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImJ0bi1wcmltYXJ5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAudmFsKFwiRW5hYmxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAudW5iaW5kKFwiY2xpY2tcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1dGhvcml6ZWRTaXRlKGlkLCBVUkwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChVUkwgPT0gXCJodHRwczovL2dpdGh1Yi5jb20vKlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHsgcHVibGljX2dpdGh1Yl9lbmFibGVkOiBmYWxzZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNuZXdfYXV0aF91cmxfXCIgKyBpZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKFwiaW5wdXRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImJ0bi1kYW5nZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcImJ0bi1wcmltYXJ5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAudmFsKFwiRW5hYmxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAudW5iaW5kKFwiY2xpY2tcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1dGhvcml6ZWRTaXRlKGlkLCBVUkwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hyb21lLnBlcm1pc3Npb25zLnJlbW92ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5zOiBbVVJMXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVtb3ZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcGVybWlzc2lvbnMgaGF2ZSBiZWVuIHJlbW92ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNuZXdfYXV0aF91cmxfXCIgKyBpZCkucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBwZXJtaXNzaW9ucyBoYXZlIG5vdCBiZWVuIHJlbW92ZWQgKGUuZy4sIHlvdSB0cmllZCB0byByZW1vdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXF1aXJlZCBwZXJtaXNzaW9ucykuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJSZXF1aXJlZCBwZXJtaXNzaW9ucyBjYW5ub3QgYmUgcmVtb3ZlZC5cIilcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVGhlIGV4dGVuc2lvbiBkb2Vzbid0IGhhdmUgdGhlIHBlcm1pc3Npb25zLlxuICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwibm90IGZvdW5kXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldHVwVUkoKSB7XG4gICAgc2hvd0F1dGhvcml6ZWRTaXRlcygpO1xuICAgICQoXCIjbmV3X2F1dGhfdXJsX3N1Ym1pdFwiKS5jbGljayhhZGRBdXRob3JpemVkU2l0ZSk7XG4gICAgJChcIiNuZXdfYXV0aF91cmxcIikua2V5dXAoIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYoJCh0aGlzKS52YWwoKSA9PSAnJyApIHtcbiAgICAgICAgICAgICQoXCIjbmV3X2F1dGhfdXJsX3N1Ym1pdFwiKS5wcm9wKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKFwiI25ld19hdXRoX3VybF9zdWJtaXRcIikucHJvcChcImRpc2FibGVkXCIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc2V0dXBVSSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9