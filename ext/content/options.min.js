function getAuthorizedSites(){chrome.permissions.getAll(function(i){allPermissions=i})}function showAuthorizedSites(){chrome.permissions.getAll(function(i){allPermissions=i,chrome.storage.sync.get({public_gist_enabled:!0,public_github_enabled:!0},function(e){extOptions=e,$.each(i.origins,function(i,e){if("https://gist.github.com/*"==e||"https://github.com/*"==e){var n=$('<li id="new_auth_url_'+i+'">\r\n                            <div>\r\n                              <input id="unauth_url_submit'+i+'" class="btn btn-sm btn-danger" type="submit" value="Disable">\r\n                            </div>\r\n                            <strong>'+e+"</strong>\r\n                        </li>");("https://gist.github.com/*"!=e||extOptions.public_gist_enabled)&&("https://github.com/*"!=e||extOptions.public_github_enabled)?n.find("input").click(function(){removeAuthorizedSite(i,e)}):(console.debug(e+" "+extOptions.public_gist_enabled),n.find("input").removeClass("btn-danger").addClass("btn-primary").val("Enable").click(function(){addAuthorizedSite(i,e)})),$("#permissions").prepend(n)}else{var n=$('<li id="new_auth_url_'+i+'">\r\n                            <div>\r\n                              <input id="unauth_url_submit'+i+'" class="btn btn-sm btn-danger" type="submit" value="Unauthorize">\r\n                            </div>\r\n                          <strong>'+e+"</strong>\r\n                        </li>");n.find("input").click(function(){removeAuthorizedSite(i,e)}),$("#new_auth_url_item").before(n)}})})})}function addAuthorizedSite(i,e){if(console.debug(i+" "+e),void 0!=i&&void 0!=e)"https://gist.github.com/*"==e?(chrome.storage.sync.set({public_gist_enabled:!0}),$("#new_auth_url_"+i).find("input").removeClass("btn-primary").addClass("btn-danger").val("Disable").unbind("click").click(function(){removeAuthorizedSite(i,e)})):"https://github.com/*"==e&&(chrome.storage.sync.set({public_github_enabled:!0}),$("#new_auth_url_"+i).find("input").removeClass("btn-primary").addClass("btn-danger").val("Disable").unbind("click").click(function(){removeAuthorizedSite(i,e)}));else{var n=$("#new_auth_url").val().trim();""!=n&&("/*"!=n.slice(-2)&&(n+="/*"),"/"===n.slice(-1)&&(n+="*")),chrome.permissions.contains({origins:[n]},function(i){i?$("li:contains("+n+")").addClass("highlight").delay(4500).queue(function(){$(this).removeClass("highlight"),$(this).dequeue()}):chrome.permissions.request({origins:[n]},function(i){if(i){getAuthorizedSites();var e=allPermissions.origins.length,t=$('<li id="new_auth_url_'+e+'">\r\n                                <div>\r\n                                  <input id="unauth_url_submit'+e+'" class="btn btn-sm btn-danger" type="submit" value="Unauthorize">\r\n                                </div>\r\n                              <strong>'+n+"</strong>\r\n                            </li>");t.find("input").click(function(){removeAuthorizedSite(e,n)}),$("#new_auth_url_item").before(t),$("#new_auth_url").val("")}else{var s=chrome.runtime.lastError;s&&(console.log(s.message),alert(s.message))}})})}}function removeAuthorizedSite(i,e){var n=confirm("Really remove/disable "+e+"?");n&&chrome.permissions.contains({origins:[e]},function(n){n?"https://gist.github.com/*"==e?(chrome.storage.sync.set({public_gist_enabled:!1}),$("#new_auth_url_"+i).find("input").removeClass("btn-danger").addClass("btn-primary").val("Enable").unbind("click").bind("click",function(){addAuthorizedSite(i,e)})):"https://github.com/*"==e?(chrome.storage.sync.set({public_github_enabled:!1}),$("#new_auth_url_"+i).find("input").removeClass("btn-danger").addClass("btn-primary").val("Enable").unbind("click").bind("click",function(){addAuthorizedSite(i,e)})):chrome.permissions.remove({origins:[e]},function(e){e?$("#new_auth_url_"+i).remove():alert("Required permissions cannot be removed.")}):console.debug("not found")})}function setupUI(){showAuthorizedSites(),$("#new_auth_url_submit").click(addAuthorizedSite)}var allPermissions={},extOptions={};document.addEventListener("DOMContentLoaded",setupUI);
//# sourceMappingURL=data:application/json;base64,