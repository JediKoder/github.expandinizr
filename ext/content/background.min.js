function eachTask(t,e){function n(i){i===t.length?e&&e():t[i](function(){n(i+1)})}n(0)}function eachItem(t,e,n){var i=t.map(function(t){return function(n){e(t,n)}});return eachTask(i,n)}chrome.tabs.onUpdated.addListener(function(t,e,n){"loading"===e.status&&chrome.tabs.executeScript(t,{code:"var injected = window.expandinizrInjected; window.expandinizrInjected = true; injected;",runAt:"document_start"},function(e){function i(e){return function(n,i){chrome.tabs[e](t,{file:n,runAt:"document_start"},i)}}if(!chrome.runtime.lastError&&!e[0]){var c=["content/github-inject.min.css"],u=["content/jquery-2.1.0.min.js","content/github-inject.min.js"],s=["content/gist-inject.min.css"];chrome.storage.sync.get({public_gist_enabled:!0,public_github_enabled:!0},function(t){console.debug({tab:n.url,opts:t,eval1:/https:\/\/gist\.github\.com/.test(n.url)&&t.public_gist_enabled,eval2:/https:\/\/github\.com/.test(n.url)&&t.public_github_enabled,eval3:!/gist\.github\.com/.test(n.url)&&!/github\.com/.test(n.url)}),(/gist\.github\.com/.test(n.url)&&t.public_gist_enabled||/github\.com/.test(n.url)&&t.public_github_enabled||!/gist\.github\.com/.test(n.url)&&!/github\.com/.test(n.url))&&eachTask(/https:\/\/gist\.github\.com/.test(n.url)||/\/gist\//.test(n.url)?[function(t){eachItem(s,i("insertCSS"),t)}]:[function(t){eachItem(c,i("insertCSS"),t)},function(t){eachItem(u,i("executeScript"),t)}])})}})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhY2tncm91bmQuanMiXSwibmFtZXMiOlsiZWFjaFRhc2siLCJ0YXNrcyIsImRvbmUiLCJuZXh0IiwiaW5kZXgiLCJsZW5ndGgiLCJlYWNoSXRlbSIsImFyciIsIml0ZXIiLCJtYXAiLCJpdGVtIiwiY2hyb21lIiwidGFicyIsIm9uVXBkYXRlZCIsImFkZExpc3RlbmVyIiwidGFiSWQiLCJjaGFuZ2VJbmZvIiwidGFiIiwic3RhdHVzIiwiZXhlY3V0ZVNjcmlwdCIsImNvZGUiLCJydW5BdCIsInJlcyIsImluamVjdCIsImZuIiwiZmlsZSIsImNiIiwicnVudGltZSIsImxhc3RFcnJvciIsImNzc0ZpbGVzIiwianNGaWxlcyIsImdpc3Rjc3NGaWxlcyIsInN0b3JhZ2UiLCJzeW5jIiwiZ2V0IiwicHVibGljX2dpc3RfZW5hYmxlZCIsInB1YmxpY19naXRodWJfZW5hYmxlZCIsIm9wdGlvbnMiLCJjb25zb2xlIiwiZGVidWciLCJ1cmwiLCJvcHRzIiwiZXZhbDEiLCJ0ZXN0IiwiZXZhbDIiLCJldmFsMyJdLCJtYXBwaW5ncyI6IkFBbUVBLFFBQVNBLFVBQVNDLEVBQU9DLEdBRXZCLFFBQVNDLEdBQUtDLEdBQ1JBLElBQVVILEVBQU1JLE9BQVFILEdBQVFBLElBQy9CRCxFQUFNRyxHQUFPLFdBQWFELEVBQUtDLEVBQVEsS0FIOUNELEVBQUssR0FPUCxRQUFTRyxVQUFTQyxFQUFLQyxFQUFNTixHQUMzQixHQUFJRCxHQUFRTSxFQUFJRSxJQUFJLFNBQVNDLEdBQzNCLE1BQU8sVUFBU1AsR0FDZEssRUFBS0UsRUFBTVAsS0FHZixPQUFPSCxVQUFTQyxFQUFPQyxHQWpGekJTLE9BQU9DLEtBQUtDLFVBQVVDLFlBQVksU0FBU0MsRUFBT0MsRUFBWUMsR0FDbEMsWUFBdEJELEVBQVdFLFFBRWZQLE9BQU9DLEtBQUtPLGNBQWNKLEdBQ3hCSyxLQUFRLDBGQUNSQyxNQUFRLGtCQUNQLFNBQVNDLEdBb0RWLFFBQVNDLEdBQU9DLEdBQ2QsTUFBTyxVQUFTQyxFQUFNQyxHQUNwQmYsT0FBT0MsS0FBS1ksR0FBSVQsR0FBU1UsS0FBTUEsRUFBTUosTUFBTyxrQkFBb0JLLElBckRwRSxJQUFJZixPQUFPZ0IsUUFBUUMsWUFDZk4sRUFBSSxHQURSLENBSUEsR0FBSU8sSUFDRixpQ0FHRUMsR0FDRiw4QkFDQSxnQ0FHRUMsR0FDRiw4QkFHRnBCLFFBQU9xQixRQUFRQyxLQUFLQyxLQUNsQkMscUJBQXFCLEVBQ3JCQyx1QkFBdUIsR0FFekIsU0FBU0MsR0FDUEMsUUFBUUMsT0FDTnRCLElBQUtBLEVBQUl1QixJQUNUQyxLQUFNSixFQUNOSyxNQUFRLDhCQUE4QkMsS0FBSzFCLEVBQUl1QixNQUFRSCxFQUFRRixvQkFDL0RTLE1BQVEsd0JBQXdCRCxLQUFLMUIsRUFBSXVCLE1BQVFILEVBQVFELHNCQUN6RFMsT0FBUyxvQkFBb0JGLEtBQUsxQixFQUFJdUIsT0FBUyxjQUFjRyxLQUFLMUIsRUFBSXVCLFFBRXBFLG9CQUFvQkcsS0FBSzFCLEVBQUl1QixNQUFRSCxFQUFRRixxQkFDN0MsY0FBY1EsS0FBSzFCLEVBQUl1QixNQUFRSCxFQUFRRCx3QkFDdEMsb0JBQW9CTyxLQUFLMUIsRUFBSXVCLE9BQVMsY0FBY0csS0FBSzFCLEVBQUl1QixPQUU5RHhDLFNBREMsOEJBQThCMkMsS0FBSzFCLEVBQUl1QixNQUFRLFdBQVdHLEtBQUsxQixFQUFJdUIsTUFFbEUsU0FBU2QsR0FDUHBCLFNBQVN5QixFQUFjUixFQUFPLGFBQWNHLE1BSzlDLFNBQVNBLEdBQ1BwQixTQUFTdUIsRUFBVU4sRUFBTyxhQUFjRyxJQUUxQyxTQUFTQSxHQUNQcEIsU0FBU3dCLEVBQVNQLEVBQU8saUJBQWtCRyIsImZpbGUiOiJiYWNrZ3JvdW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2hyb21lLnRhYnMub25VcGRhdGVkLmFkZExpc3RlbmVyKGZ1bmN0aW9uKHRhYklkLCBjaGFuZ2VJbmZvLCB0YWIpIHtcbiAgaWYgKGNoYW5nZUluZm8uc3RhdHVzICE9PSAnbG9hZGluZycpIHJldHVyblxuXG4gIGNocm9tZS50YWJzLmV4ZWN1dGVTY3JpcHQodGFiSWQsIHtcbiAgICBjb2RlICA6ICd2YXIgaW5qZWN0ZWQgPSB3aW5kb3cuZXhwYW5kaW5penJJbmplY3RlZDsgd2luZG93LmV4cGFuZGluaXpySW5qZWN0ZWQgPSB0cnVlOyBpbmplY3RlZDsnLFxuICAgIHJ1bkF0IDogJ2RvY3VtZW50X3N0YXJ0J1xuICB9LCBmdW5jdGlvbihyZXMpIHtcbiAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yIHx8IC8vIGRvbid0IGNvbnRpbnVlIGlmIGVycm9yIChpLmUuIHBhZ2UgaXNuJ3QgaW4gcGVybWlzc2lvbiBsaXN0KVxuICAgICAgICByZXNbMF0pIC8vIHZhbHVlIG9mIGBpbmplY3RlZGAgYWJvdmU6IGRvbid0IGluamVjdCB0d2ljZVxuICAgICAgcmV0dXJuXG5cbiAgICB2YXIgY3NzRmlsZXMgPSBbXG4gICAgICAnY29udGVudC9naXRodWItaW5qZWN0Lm1pbi5jc3MnXG4gICAgXVxuXG4gICAgdmFyIGpzRmlsZXMgPSBbXG4gICAgICAnY29udGVudC9qcXVlcnktMi4xLjAubWluLmpzJyxcbiAgICAgICdjb250ZW50L2dpdGh1Yi1pbmplY3QubWluLmpzJ1xuICAgIF1cblxuICAgIHZhciBnaXN0Y3NzRmlsZXMgPSBbXG4gICAgICAnY29udGVudC9naXN0LWluamVjdC5taW4uY3NzJ1xuICAgIF1cblxuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KHtcbiAgICAgIHB1YmxpY19naXN0X2VuYWJsZWQ6IHRydWUsXG4gICAgICBwdWJsaWNfZ2l0aHViX2VuYWJsZWQ6IHRydWVcbiAgICB9LFxuICAgIGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoe1xuICAgICAgICB0YWI6IHRhYi51cmwsXG4gICAgICAgIG9wdHM6IG9wdGlvbnMsXG4gICAgICAgIGV2YWwxOiAoL2h0dHBzOlxcL1xcL2dpc3RcXC5naXRodWJcXC5jb20vLnRlc3QodGFiLnVybCkgJiYgb3B0aW9ucy5wdWJsaWNfZ2lzdF9lbmFibGVkKSxcbiAgICAgICAgZXZhbDI6ICgvaHR0cHM6XFwvXFwvZ2l0aHViXFwuY29tLy50ZXN0KHRhYi51cmwpICYmIG9wdGlvbnMucHVibGljX2dpdGh1Yl9lbmFibGVkKSxcbiAgICAgICAgZXZhbDM6ICghL2dpc3RcXC5naXRodWJcXC5jb20vLnRlc3QodGFiLnVybCkgJiYgIS9naXRodWJcXC5jb20vLnRlc3QodGFiLnVybCkpXG4gICAgICB9KTtcbiAgICAgIGlmKCgvZ2lzdFxcLmdpdGh1YlxcLmNvbS8udGVzdCh0YWIudXJsKSAmJiBvcHRpb25zLnB1YmxpY19naXN0X2VuYWJsZWQpIHx8XG4gICAgICAgICAoL2dpdGh1YlxcLmNvbS8udGVzdCh0YWIudXJsKSAmJiBvcHRpb25zLnB1YmxpY19naXRodWJfZW5hYmxlZCkgfHxcbiAgICAgICAgICghL2dpc3RcXC5naXRodWJcXC5jb20vLnRlc3QodGFiLnVybCkgJiYgIS9naXRodWJcXC5jb20vLnRlc3QodGFiLnVybCkpKSB7XG4gICAgICAgIGlmKC9odHRwczpcXC9cXC9naXN0XFwuZ2l0aHViXFwuY29tLy50ZXN0KHRhYi51cmwpIHx8IC9cXC9naXN0XFwvLy50ZXN0KHRhYi51cmwpKSB7IC8vIGlmIHdlIGFyZSBpbiBhIGdpc3Qgc2l0ZSwgaW5qZWN0IGdpc3QgY3NzXG4gICAgICAgICAgZWFjaFRhc2soW1xuICAgICAgICAgICAgZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgICAgICAgZWFjaEl0ZW0oZ2lzdGNzc0ZpbGVzLCBpbmplY3QoJ2luc2VydENTUycpLCBjYilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gb3RoZXJ3aXNlLCBpbmplY3QgZ2l0aHViIGpzIGFuZCBjc3NcbiAgICAgICAgICBlYWNoVGFzayhbXG4gICAgICAgICAgICBmdW5jdGlvbihjYikge1xuICAgICAgICAgICAgICBlYWNoSXRlbShjc3NGaWxlcywgaW5qZWN0KCdpbnNlcnRDU1MnKSwgY2IpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24oY2IpIHtcbiAgICAgICAgICAgICAgZWFjaEl0ZW0oanNGaWxlcywgaW5qZWN0KCdleGVjdXRlU2NyaXB0JyksIGNiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBpbmplY3QoZm4pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihmaWxlLCBjYikge1xuICAgICAgICBjaHJvbWUudGFic1tmbl0odGFiSWQsIHsgZmlsZTogZmlsZSwgcnVuQXQ6ICdkb2N1bWVudF9zdGFydCcgfSwgY2IpXG4gICAgICB9XG4gICAgfVxuXG4gIH0pXG59KVxuXG5mdW5jdGlvbiBlYWNoVGFzayh0YXNrcywgZG9uZSkge1xuICBuZXh0KDApXG4gIGZ1bmN0aW9uIG5leHQoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IHRhc2tzLmxlbmd0aCkgZG9uZSAmJiBkb25lKClcbiAgICBlbHNlIHRhc2tzW2luZGV4XShmdW5jdGlvbigpIHsgbmV4dChpbmRleCArIDEpIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gZWFjaEl0ZW0oYXJyLCBpdGVyLCBkb25lKSB7XG4gIHZhciB0YXNrcyA9IGFyci5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiBmdW5jdGlvbihuZXh0KSB7XG4gICAgICBpdGVyKGl0ZW0sIG5leHQpXG4gICAgfVxuICB9KVxuICByZXR1cm4gZWFjaFRhc2sodGFza3MsIGRvbmUpXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9