function getAuthorizedSites(){chrome.permissions.getAll(function(i){allPermissions=i})}function showAuthorizedSites(){chrome.permissions.getAll(function(i){allPermissions=i,chrome.storage.sync.get({public_gist_enabled:!0,public_github_enabled:!0},function(e){extOptions=e,$.each(i.origins,function(i,e){if("https://gist.github.com/*"==e||"https://github.com/*"==e){var t=$('<li id="new_auth_url_'+i+'">\r\n                            <div>\r\n                              <input id="unauth_url_submit'+i+'" class="btn btn-sm btn-danger" type="submit" value="Disable">\r\n                            </div>\r\n                            <strong>'+e+"</strong>\r\n                        </li>");("https://gist.github.com/*"!=e||extOptions.public_gist_enabled)&&("https://github.com/*"!=e||extOptions.public_github_enabled)?t.find("input").click(function(){removeAuthorizedSite(i,e)}):(console.debug(e+" "+extOptions.public_gist_enabled),t.find("input").removeClass("btn-danger").addClass("btn-primary").val("Enable").click(function(){addAuthorizedSite(i,e)})),$("#permissions").prepend(t)}else{var t=$('<li id="new_auth_url_'+i+'">\r\n                            <div>\r\n                              <input id="unauth_url_submit'+i+'" class="btn btn-sm btn-danger" type="submit" value="Unauthorize">\r\n                            </div>\r\n                          <strong>'+e+"</strong>\r\n                        </li>");t.find("input").click(function(){removeAuthorizedSite(i,e)}),$("#new_auth_url_item").before(t)}})})})}function addAuthorizedSite(i,e){if(console.debug(i+" "+e),void 0!=i&&void 0!=e)"https://gist.github.com/*"==e?(chrome.storage.sync.set({public_gist_enabled:!0}),$("#new_auth_url_"+i).find("input").removeClass("btn-primary").addClass("btn-danger").val("Disable").unbind("click").click(function(){removeAuthorizedSite(i,e)})):"https://github.com/*"==e&&(chrome.storage.sync.set({public_github_enabled:!0}),$("#new_auth_url_"+i).find("input").removeClass("btn-primary").addClass("btn-danger").val("Disable").unbind("click").click(function(){removeAuthorizedSite(i,e)}));else{var t=$("#new_auth_url").val().trim();""!=t&&("/*"!=t.slice(-2)&&(t+="/*"),"/"===t.slice(-1)&&(t+="*")),chrome.permissions.contains({origins:[t]},function(i){i?($("li:contains("+t+")").addClass("highlight").delay(4500).queue(function(){$(this).removeClass("highlight"),$(this).dequeue()}),$("#new_auth_url_msg").text("Duplicate URL - "+t)):chrome.permissions.request({origins:[t]},function(i){if(i){getAuthorizedSites();var e=allPermissions.origins.length,n=$('<li id="new_auth_url_'+e+'">\r\n                                <div>\r\n                                  <input id="unauth_url_submit'+e+'" class="btn btn-sm btn-danger" type="submit" value="Unauthorize">\r\n                                </div>\r\n                              <strong>'+t+"</strong>\r\n                            </li>");n.find("input").click(function(){removeAuthorizedSite(e,t)}),$("#new_auth_url_item").before(n),$("#new_auth_url").val(""),$("#new_auth_url_submit").prop("disabled",!0),$("#new_auth_url_msg").text("")}else{var s=chrome.runtime.lastError;s&&(console.log(s.message),$("#new_auth_url_msg").text(s.message))}})})}}function removeAuthorizedSite(i,e){var t=confirm("Really remove/disable "+e+"?");t&&chrome.permissions.contains({origins:[e]},function(t){t?"https://gist.github.com/*"==e?(chrome.storage.sync.set({public_gist_enabled:!1}),$("#new_auth_url_"+i).find("input").removeClass("btn-danger").addClass("btn-primary").val("Enable").unbind("click").bind("click",function(){addAuthorizedSite(i,e)})):"https://github.com/*"==e?(chrome.storage.sync.set({public_github_enabled:!1}),$("#new_auth_url_"+i).find("input").removeClass("btn-danger").addClass("btn-primary").val("Enable").unbind("click").bind("click",function(){addAuthorizedSite(i,e)})):chrome.permissions.remove({origins:[e]},function(e){e?$("#new_auth_url_"+i).remove():alert("Required permissions cannot be removed.")}):console.debug("not found")})}function setupUI(){showAuthorizedSites(),$("#new_auth_url_submit").click(addAuthorizedSite),$("#new_auth_url").keyup(function(){""==$(this).val()?$("#new_auth_url_submit").prop("disabled",!0):$("#new_auth_url_submit").prop("disabled",!1)})}var allPermissions={},extOptions={};document.addEventListener("DOMContentLoaded",setupUI);
//# sourceMappingURL=data:application/json;base64,